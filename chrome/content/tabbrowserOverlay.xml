<!--
  ** Extends Firefox tab API to support multiple tab selection. Mostly based on patches attached to
  ** bug 566510.
  ** @see https://bugzilla.mozilla.org/show_bug.cgi?id=566510
  -->
<bindings id="bug566510_tabBrowserBindingsOverlay"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <!--
      ** Extends gBrowser.
      ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#17
      -->
    <binding id="bug566510_tabbrowserOverlay" extends="chrome://browser/content/tabbrowser.xml#tabbrowser">
        <implementation>
            <!--
              ** Returns array of visible multiselected tabs. This is not part of
              ** the bug patch, but it's handy.
              -->
            <property name="selectedTabs" readonly="true">
                <getter><![CDATA[
                    return Array.filter(this.visibleTabs, function (tab) tab.multiselected);
                ]]></getter>
            </property>

            <!--
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#2117
              -->
            <method name="reloadTabs">
                <parameter name="aTabs"/>
                <body><![CDATA[
                    if (!aTabs)
                        return null;
                    // When called by the tab context menu, aTabs is actually a tab
                    if (aTabs instanceof XULElement) {
                        if (aTabs.multiselected)
                            aTabs = this.selectedTabs;
                        else
                            aTabs = [aTabs];
                    }
                    var self = this;
                    aTabs.forEach(function(tab) {
                        self.reloadTab(tab);
                    });
                ]]></body>
            </method>

            <!--
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#187
              -->
            <method name="pinTabs">
                <parameter name="aTabs"/>
                <body><![CDATA[
                    if (!aTabs)
                        return null;
                    // When called by the tab context menu, aTabs is actually a tab
                    if (aTabs instanceof XULElement) {
                        if (aTabs.multiselected)
                            aTabs = this.selectedTabs;
                        else
                            aTabs = [aTabs];
                    }
                    var self = this;
                    aTabs.forEach(function(tab) {
                        self.pinTab(tab);
                    });
                ]]></body>
            </method>

            <!--
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#213
              -->
            <method name="unpinTabs">
                <parameter name="aTabs"/>
                <body><![CDATA[
                    if (!aTabs)
                        return null;
                    // When called by the tab context menu, aTabs is actually a tab
                    if (aTabs instanceof XULElement) {
                        if (aTabs.multiselected)
                            aTabs = this.selectedTabs;
                        else
                            aTabs = [aTabs];
                    }
                    var self = this;
                    aTabs.reverse().forEach(function(tab) {
                        self.unpinTab(tab);
                    });
                ]]></body>
            </method>

            <!--
              ** Moves tabs to a new browser window, unless they are already the only tabs
              ** in the current window, in which case this will do nothing.
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#2286
              -->
            <method name="replaceTabsWithWindow">
                <parameter name="aTabs"/>
                <body><![CDATA[
                    if (!aTabs || this.tabs.length == 1)
                        return null;
                    // When called by the tab context menu, aTabs is actually a tab
                    if (aTabs instanceof XULElement) {
                        if (aTabs.multiselected)
                            aTabs = this.selectedTabs;
                        else
                            aTabs = [aTabs];
                    }
                    if (!aTabs.length || aTabs.length == this.visibleTabs.length)
                        return null;
                    let tabToSelect = null;
                    let win = this.replaceTabWithWindow(aTabs.shift());
                    // We're done if there was only one tab to detach.
                    if (!aTabs.length)
                        return win;
                    let moveTheRest = function() {
                        win.removeEventListener("load", arguments.callee, false);
                        let remoteBrowser = win.gBrowser;
                        remoteBrowser.selectedTab.multiselected = true;
                        aTabs.forEach(function(tab) {
                            let newTab = remoteBrowser.addTab("about:blank");
                            let newBrowser = remoteBrowser.getBrowserForTab(newTab);
                            newBrowser.stop();
                            newBrowser.docShell;
                            if (!tabToSelect && tab.selected)
                                tabToSelect = newTab;
                            remoteBrowser.swapBrowsersAndCloseOther(newTab, tab);
                            newTab.multiselected = true;
                        });
                        if (tabToSelect) {
                            // we need to wait until navigation is initialized
                            setTimeout(function() {
                                remoteBrowser.selectedTab = tabToSelect;
                            }, 0);
                        }
                    };
                    if (win)
                        win.addEventListener("load", moveTheRest, false);
                    return win;
                ]]></body>
            </method>

            <!--
              ** @override tabbrowser.removeAllTabsBut
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#1588
              -->
            <method name="removeAllTabsBut">
                <parameter name="aTab"/>
                <body><![CDATA[
                    if (aTab.pinned)
                        return;

                    if (this.warnAboutClosingTabs(this.closingTabsEnum && this.closingTabsEnum.OTHER || false)) {
                        //Note: this.closingTabsEnum is not defined in older Firefox versions.
                        let tabs = this.visibleTabs;
                        this.selectedTab = aTab;

                        let closedTabs = 0;
                        for (let i = tabs.length - 1; i >= 0; --i) {
                            if (tabs[i] != aTab && !tabs[i].pinned &&
                               (!aTab.multiselected || !tabs[i].multiselected)) {
                                    this.removeTab(tabs[i], {animate: true});
                                    closedTabs++;
                            }
                        }
                        if ("SessionStore" in window) // Introduced sometime after Firefox 24.0
                            SessionStore.setNumberOfTabsClosedLast(window, closedTabs);
                    }
                ]]></body>
            </method>

            <!--
              ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#1621
              -->
            <method name="removeTabs">
                <parameter name="aTabs"/>
                <body><![CDATA[
                    if (!aTabs)
                        return null;
                    // When called by the tab context menu, aTabs is actually a tab
                    if (aTabs instanceof XULElement) {
                        if (aTabs.multiselected)
                            aTabs = this.selectedTabs;
                        else
                            aTabs = [aTabs];
                    }
                    var self = this;
                    aTabs.forEach(function(tab) {
                        self.removeTab(tab);
                    });
                ]]></body>
            </method>
        </implementation>
    </binding>

    <!--
      ** Extends tab container.
      ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#3024
      -->
    <binding id="bug566510_tabbrowser-tabsOverlay" extends="chrome://browser/content/tabbrowser.xml#tabbrowser-tabs">
        <implementation>
            <!-- Not used in this addon, but defined in patch v12. -->
            <property name="_numMultiselected" readonly="true">
                <getter>
                    return this.tabbrowser.selectedTabs.length;
                </getter>
            </property>

            <!-- Unselects all tabs in current window. -->
            <method name="_clearMultiselection">
                <body><![CDATA[
                    var tabs = this.tabbrowser.tabs;
                    for (let i = 0; i < tabs.length; i++) {
                        tabs[i].multiselected = false;
                    }
                ]]></body>
            </method>
        </implementation>
    </binding>

    <!--
      ** Extends tab definition with "multiselected" boolean property and adds listeners to handle
      ** keyboard shortcuts:
      **   LMB         clears selection
      **   Ctrl + LMB  toggles selection on one tab
      **   Shift + LMB toggles selection on range of tabs
      ** @see http://mxr.mozilla.org/mozilla-release/source/browser/base/content/tabbrowser.xml#4334
      -->
    <binding id="bug566510_tabbrowser-tabOverlay" extends="chrome://browser/content/tabbrowser.xml#tabbrowser-tab">
        <implementation>
            <property name="multiselected">
                <getter>
                    return this.getAttribute("multiselected") == "true";
                </getter>
                <setter><![CDATA[
                    if (val && !this.multiselected) {
                        this.setAttribute("multiselected", "true");
                        //this.tabContainer._numMultiselected++;
                    } else if (!val && this.multiselected) {
                        this.removeAttribute("multiselected");
                        //this.tabContainer._numMultiselected--;
                    }

                    // update multiselection observer
                    var multiselection = this.tabContainer._numMultiselected > 1;
                    var broadcaster = document.getElementById("multiselectionBroadcaster");
                    broadcaster.setAttribute("multiselection", multiselection);
                ]]></setter>
            </property>
            <field name="tabContainer" readonly="true">
                this.parentNode
            </field>
        </implementation>
        <handlers>
            <!--
              ** Clear multiselection if user clicks a tab (and accel or shift is held).
              ** @see https://bugzilla.mozilla.org/show_bug.cgi?id=921010#c0
              -->
            <handler event="mousedown" button="0" phase="capturing" modifiers="accesskey alt meta any"><![CDATA[
                this.tabContainer._clearMultiselection();
            ]]></handler>

            <!-- Ctrl + LMB. To prevent changing tab on multiselect stop event propagation. -->
            <handler event="mousedown" button="0" phase="capturing" modifiers="accel"><![CDATA[
                this.multiselected = !this.multiselected;
                event.stopPropagation();
            ]]></handler>

            <!-- Shift + LMB To prevent changing tab on multiselect stop event propagation. -->
            <handler event="mousedown" button="0" phase="capturing" modifiers="shift"><![CDATA[
                var start = this.tabContainer.selectedItem._tPos;
                var end = this._tPos;

                if (start == end) {
                    return;
                } else if (start > end) {
                    [start, end] = [end, start];
                }

                for (var i = start; i <= end; i++) {
                    var tab = gBrowser.tabs[i];
                    if (gBrowser.visibleTabs.indexOf(tab) != -1) {
                        tab.multiselected = true;
                    } //else, ignore hidden tabs.
                }
                event.stopPropagation();
            ]]></handler>
        </handlers>
    </binding>
</bindings>
